Execution and deployment instructions

The steps described below assume you are in a Windows operating system.

For more information about how to run in other operating systems, pelase refer to the following url:
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-5.0

Prerequisites: please make sure the Sql Server is up and running on your machine. Also, .Net Core 3.1 SDK must be installed.

1. Open command prompt and go to "TheGame" web project directory.
Next, type the following:
dotnet run [HIT ENTER]
(This will create the database along with all tables, relationships, the leaderboards view will ultimately perform initial data seeds.

You can test the application at this point by opening a web browser and then reaching out to the following url's:
http://localhost:5000/swagger
http://localhost:5000/api/v1/leaderboards

2. Now, to switch to a production environment:
Open command prompt and go to "TheGame" solution directory the type the following:
dotnet build -c release [ENTER]
set ASPNETCORE_ENVIRONMENT=Production [HIT ENTER]
dotnet run --no-launch-profile [HIT ENTER]

With this setup, the application does not include the Open API Swagger documentation. It only accepts requests from the relevant application endpoints.

Endpoints
1.
(POST) http://localhost:5000/api/v1/match -> This is the entry point for receiving game match data
Request body example:
{
    "gameId" : 1,
    "playerId" : 1,
    "win" : 68000000,
    "timestamp" : "2021-04-17T14:28:34Z"   
}

2.
(GET)  http://localhost:5000/api/v1/cache-data/game-matches -> This endpoint displays all pending match data that has been posted for later persistence.

3.
(GET)  http://localhost:5000/api/v1/cache-data/games -> This endpoint displays all games ids registered in the system
Useful for creating requests when using the endpoint explained in item 1

4.
(GET)  http://localhost:5000/api/v1/cache-data/players -> This endpoint displays all players ids registered ine th system
Useful for creating requests when using the endpoint explained in item 1

5.
(GET)  http://localhost:5000/api/v1/leaderboards -> This endpoint displays the leaderboards after the database flushing background service
has been executed at least once.

How to play with this solution
1.Invoke a couple times endpoint 1. You can use a tool like Postman or Advanced REST Client to send some requests as per explained in item 1.
2.In this moment, invoke endpoint 2 to check that match data is in the cache. These are data waiting to be flushed to the database.
From this moment on, you can keep inserting data and, after approximately 40 seconds, the database flushing service starts its job to persist all match data
it can get from cache in that moment, without losing new posted match data.
Everytime the background service runs, the leaderboards is automatically refreshed and its data is stored in cache for performance.
As soon as the game match data is flushed to the database, all processed data are removed from the cache preserving the ones that weren't processed yet,
waiting for the next service execution.