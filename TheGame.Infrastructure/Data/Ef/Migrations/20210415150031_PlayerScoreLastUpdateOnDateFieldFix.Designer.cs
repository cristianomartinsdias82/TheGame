// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheGame.Data.Ef;

namespace TheGame.Infrastructure.Data.Ef.Migrations
{
    [DbContext(typeof(TheGameDbContext))]
    [Migration("20210415150031_PlayerScoreLastUpdateOnDateFieldFix")]
    partial class PlayerScoreLastUpdateOnDateFieldFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheGame.Domain.GameMatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("IX_UN_GameMatch_Title");

                    b.ToTable("GameMatches");
                });

            modelBuilder.Entity("TheGame.Domain.GameMatchesPlayers", b =>
                {
                    b.Property<long>("GameMatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("MatchDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Win")
                        .HasColumnType("bigint");

                    b.HasKey("GameMatchId", "PlayerId")
                        .IsClustered();

                    b.HasIndex("PlayerId");

                    b.ToTable("GameMatchesPlayers");
                });

            modelBuilder.Entity("TheGame.Domain.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ScoreLastUpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_UN_Player_Name");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasDatabaseName("IX_UN_Player_Nickname");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TheGame.Domain.GameMatchesPlayers", b =>
                {
                    b.HasOne("TheGame.Domain.GameMatch", "GameMatch")
                        .WithMany("GameMatchesPlayers")
                        .HasForeignKey("GameMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGame.Domain.Player", "Player")
                        .WithMany("GameMatchesPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameMatch");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TheGame.Domain.GameMatch", b =>
                {
                    b.Navigation("GameMatchesPlayers");
                });

            modelBuilder.Entity("TheGame.Domain.Player", b =>
                {
                    b.Navigation("GameMatchesPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
